#!/usr/bin/env bash
set -euo pipefail

# Color output for better user experience
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored messages
print_error() {
  echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
  echo -e "${GREEN}$1${NC}"
}

print_info() {
  echo -e "${YELLOW}$1${NC}"
}

# Function to validate version exists
validate_version() {
  local version="$1"
  
  # Special cases that are always valid
  if [ "$version" = "master" ] || [ "$version" = "latest" ]; then
    return 0
  fi
  
  # Check if it's a valid git SHA (40 characters hex)
  if [[ "$version" =~ ^[0-9a-f]{40}$ ]]; then
    # Validate the commit exists
    local commit_check=""
    if command -v curl &> /dev/null; then
      commit_check=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/zigtools/zls/commits/$version")
    elif command -v wget &> /dev/null; then
      commit_check=$(wget -q --spider -S "https://api.github.com/repos/zigtools/zls/commits/$version" 2>&1 | grep "HTTP/" | awk '{print $2}' | tail -1)
    fi
    
    if [ "$commit_check" = "200" ]; then
      return 0
    fi
  fi
  
  # Check if version exists as a tag
  local tag_check=""
  if command -v curl &> /dev/null; then
    tag_check=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/zigtools/zls/git/refs/tags/$version")
  elif command -v wget &> /dev/null; then
    tag_check=$(wget -q --spider -S "https://api.github.com/repos/zigtools/zls/git/refs/tags/$version" 2>&1 | grep "HTTP/" | awk '{print $2}' | tail -1)
  fi
  
  if [ "$tag_check" = "200" ]; then
    return 0
  else
    return 1
  fi
}

# Function to clone with retry
clone_with_retry() {
  local url="$1"
  local dest="$2"
  local ref="$3"
  local is_sha="$4"
  local max_retries=3
  local retry_count=0
  
  while [ $retry_count -lt $max_retries ]; do
    print_info "Attempting to download ZLS (attempt $((retry_count + 1))/$max_retries)..."
    
    if [ "$is_sha" = "true" ]; then
      # For commit SHAs, we need to clone the full repo then checkout
      if git clone "$url" "$dest" 2>/dev/null; then
        cd "$dest"
        if git checkout "$ref" 2>/dev/null; then
          cd - > /dev/null
          return 0
        fi
        cd - > /dev/null
      fi
    elif [ -n "$ref" ]; then
      if git clone --depth=1 --branch "$ref" "$url" "$dest" 2>/dev/null; then
        return 0
      fi
    else
      if git clone --depth=1 "$url" "$dest" 2>/dev/null; then
        return 0
      fi
    fi
    
    retry_count=$((retry_count + 1))
    if [ $retry_count -lt $max_retries ]; then
      print_info "Download failed, retrying in 2 seconds..."
      sleep 2
    fi
  done
  
  return 1
}

# Main download logic
main() {
  local version="${ASDF_INSTALL_VERSION}"
  local download_path="${ASDF_DOWNLOAD_PATH}"
  
  print_info "Preparing to download ZLS version: $version"
  
  # Validate git is available
  if ! command -v git &> /dev/null; then
    print_error "git is required but not installed. Please install git first."
    exit 1
  fi
  
  # Clean download directory if it exists
  if [ -d "$download_path" ]; then
    print_info "Cleaning existing download directory..."
    rm -rf "$download_path"
  fi
  
  # Create download directory
  mkdir -p "$download_path"
  
  # Check if version is a git SHA
  local is_sha="false"
  if [[ "$version" =~ ^[0-9a-f]{40}$ ]]; then
    is_sha="true"
    print_info "Detected git commit SHA: $version"
  fi
  
  # Validate version if not master/latest
  if [ "$version" != "master" ] && [ "$version" != "latest" ]; then
    print_info "Validating version $version exists..."
    if ! validate_version "$version"; then
      print_error "Version $version not found in ZLS repository."
      print_info "Run 'mise list-all zls' to see available versions."
      exit 1
    fi
  fi
  
  # Download the repository
  if [ "$version" = "master" ] || [ "$version" = "latest" ]; then
    print_info "Downloading ZLS from master branch..."
    if clone_with_retry "https://github.com/zigtools/zls" "$download_path" "" "false"; then
      print_success "Successfully downloaded ZLS (master)"
    else
      print_error "Failed to download ZLS after multiple attempts"
      exit 1
    fi
  elif [ "$is_sha" = "true" ]; then
    print_info "Downloading ZLS at commit $version..."
    if clone_with_retry "https://github.com/zigtools/zls" "$download_path" "$version" "true"; then
      print_success "Successfully downloaded ZLS at commit $version"
    else
      print_error "Failed to download ZLS at commit $version"
      exit 1
    fi
  else
    print_info "Downloading ZLS version $version..."
    if clone_with_retry "https://github.com/zigtools/zls" "$download_path" "$version" "false"; then
      print_success "Successfully downloaded ZLS version $version"
    else
      print_error "Failed to download ZLS version $version"
      exit 1
    fi
  fi
  
  # Verify download
  if [ ! -d "$download_path/.git" ]; then
    print_error "Download verification failed - repository structure invalid"
    exit 1
  fi
  
  # Get commit info for user reference
  cd "$download_path"
  local commit_hash=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
  local commit_date=$(git log -1 --format=%cd --date=short 2>/dev/null || echo "unknown")
  
  print_info "Downloaded commit: $commit_hash ($commit_date)"
  print_success "Download completed successfully!"
}

main