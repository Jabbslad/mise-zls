#!/usr/bin/env bash
set -euo pipefail

# Color output for better user experience
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
print_error() {
  echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
  echo -e "${GREEN}$1${NC}"
}

print_info() {
  echo -e "${YELLOW}$1${NC}"
}

print_step() {
  echo -e "${BLUE}==> $1${NC}"
}

# Function to check Zig version compatibility
check_zig_version() {
  if ! command -v zig &> /dev/null; then
    print_error "Zig is required to build ZLS but not found in PATH"
    print_info "Please install Zig first. You can use: mise install zig@latest"
    return 1
  fi
  
  local zig_version=$(zig version 2>/dev/null || echo "unknown")
  print_info "Found Zig version: $zig_version"
  
  # Check if version is compatible (0.11.0 or later recommended)
  if [[ "$zig_version" == "0.10."* ]] || [[ "$zig_version" == "0.9."* ]]; then
    print_info "Warning: Zig $zig_version might not be compatible with latest ZLS"
    print_info "Consider upgrading Zig for better compatibility"
  fi
  
  return 0
}

# Function to detect system architecture
detect_architecture() {
  local arch=$(uname -m)
  case "$arch" in
    x86_64|amd64)
      echo "x86_64"
      ;;
    aarch64|arm64)
      echo "aarch64"
      ;;
    armv7l|armhf)
      echo "arm"
      ;;
    *)
      echo "$arch"
      ;;
  esac
}

# Function to detect operating system
detect_os() {
  local os=$(uname -s | tr '[:upper:]' '[:lower:]')
  case "$os" in
    linux*)
      echo "linux"
      ;;
    darwin*)
      echo "macos"
      ;;
    msys*|mingw*|cygwin*)
      echo "windows"
      ;;
    *)
      echo "$os"
      ;;
  esac
}

# Function to build ZLS with progress reporting
build_zls() {
  local build_path="$1"
  local install_path="$2"
  
  cd "$build_path"
  
  print_step "Building ZLS with optimization..."
  
  # Detect if we should use specific build flags
  local build_cmd="zig build -Doptimize=ReleaseSafe"
  
  # Check if build.zig.zon exists (newer versions)
  if [ -f "build.zig.zon" ]; then
    print_info "Detected build.zig.zon - using newer build system"
  fi
  
  # Run the build with visible output for progress
  if $build_cmd 2>&1 | while IFS= read -r line; do
    # Filter and display relevant build progress
    if [[ "$line" == *"error"* ]]; then
      echo -e "${RED}$line${NC}"
    elif [[ "$line" == *"warning"* ]]; then
      echo -e "${YELLOW}$line${NC}"
    elif [[ "$line" == *"Build"* ]] || [[ "$line" == *"Compile"* ]] || [[ "$line" == *"Link"* ]]; then
      echo "$line"
    fi
  done; then
    print_success "Build completed successfully!"
    return 0
  else
    print_error "Build failed!"
    return 1
  fi
}

# Function to verify installation
verify_installation() {
  local binary_path="$1"
  
  if [ ! -f "$binary_path" ]; then
    print_error "Binary not found at $binary_path"
    return 1
  fi
  
  if [ ! -x "$binary_path" ]; then
    print_error "Binary exists but is not executable"
    return 1
  fi
  
  # Try to get version
  local version_output=$("$binary_path" --version 2>&1 || echo "unknown")
  print_info "Installed ZLS: $version_output"
  
  return 0
}

# Main installation logic
main() {
  local version="${ASDF_INSTALL_VERSION}"
  local download_path="${ASDF_DOWNLOAD_PATH}"
  local install_path="${ASDF_INSTALL_PATH}"
  
  print_step "Installing ZLS version: $version"
  
  # Display system information
  local os=$(detect_os)
  local arch=$(detect_architecture)
  print_info "System: $os/$arch"
  
  # Check for Zig
  if ! check_zig_version; then
    exit 1
  fi
  
  # Verify download directory exists
  if [ ! -d "$download_path" ]; then
    print_error "Download directory not found: $download_path"
    print_info "Please run the download step first"
    exit 1
  fi
  
  # Check if build.zig exists
  if [ ! -f "$download_path/build.zig" ]; then
    print_error "build.zig not found in $download_path"
    print_info "The download may be corrupted. Please try downloading again."
    exit 1
  fi
  
  # Build ZLS
  print_step "Starting build process..."
  if ! build_zls "$download_path" "$install_path"; then
    print_error "Build process failed"
    print_info "Check that your Zig version is compatible with ZLS $version"
    exit 1
  fi
  
  # Create installation directory
  print_step "Installing ZLS binary..."
  mkdir -p "$install_path/bin"
  
  # Find and install the built binary
  local zls_binary="$download_path/zig-out/bin/zls"
  if [ ! -f "$zls_binary" ]; then
    # Try alternative location for older versions
    zls_binary="$download_path/zig-cache/bin/zls"
    if [ ! -f "$zls_binary" ]; then
      print_error "Could not find built ZLS binary"
      print_info "Expected at: $download_path/zig-out/bin/zls"
      exit 1
    fi
  fi
  
  # Install the binary
  install -Dm755 "$zls_binary" "$install_path/bin/zls"
  
  # Verify installation
  print_step "Verifying installation..."
  if verify_installation "$install_path/bin/zls"; then
    print_success "ZLS $version installed successfully!"
    print_info "Binary location: $install_path/bin/zls"
    
    # Provide usage hints
    echo ""
    print_info "To use ZLS:"
    print_info "  • Set as global: mise global zls@$version"
    print_info "  • Set for project: mise local zls@$version"
    print_info "  • Verify: zls --version"
  else
    print_error "Installation verification failed"
    exit 1
  fi
}

main